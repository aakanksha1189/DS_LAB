//https://meet.google.com/drw-qiwq-qop?pli=1&authuser=3
#include<stdio.h>
#include<stdlib.h>

struct node
{
	int data;
	struct node *next;
	struct node *prev;
};
struct node *head=NULL;

void insert_left()
{
	int listele;
	struct node *new_node,*temp;
	printf("Enter the element in the list: ");
	scanf("%d",&listele);
	new_node=(struct node*)malloc(sizeof(struct node));
	printf("Enter the new node data: ");
	scanf("%d",&new_node->data);
	new_node->next=NULL;
	new_node->prev=NULL;
    if(head==NULL)
    {
        printf("Empty list\n"); return;
    }
	temp=head;
	while(temp->data!=listele)
	{
		temp=temp->next;
		if(temp==NULL)
		{
			printf("Element is  not in the list\n");
			return;
		}
	}
		if(temp->prev == NULL)
	{
		temp->prev = new_node;
		new_node->prev = NULL;
		new_node->next = temp;
		head = new_node;
	}
	else{
	    new_node->prev=temp->prev;
    	temp->prev=new_node;
	    new_node->next=temp;
    	new_node->prev->next = new_node;
	}
}

void insert_right()
{
    int listele;
	struct node *new_node,*temp;
	printf("Enter the element in the list: ");
	scanf("%d",&listele);
	new_node=(struct node*)malloc(sizeof(struct node));
	printf("Enter the new node data: ");
	scanf("%d",&new_node->data);
	new_node->next=NULL;
	new_node->prev=NULL;
    if(head==NULL)
    {
        printf("Empty list\n"); return;
    }
	temp=head;
	while(temp->data!=listele)
	{
		temp=temp->next;
		if(temp==NULL)
		{
			printf("Element is  not in the list\n");
			return;
		}
	}
	if(temp->next == NULL)
	{
		temp->next = new_node;
		new_node->prev = temp;
	}
	else
	{
	    new_node->next=temp->next;
    	temp->next=new_node;
	    new_node->prev=temp;
	    new_node->next->prev=new_node;
	}
}

void insert_end()
{
	struct node *new_node,*temp;
	new_node=(struct node*)malloc(sizeof(struct node));
	printf("Enter the element: ");
	scanf("%d",&new_node->data);
	new_node->next=NULL;
	new_node->prev=NULL;
	if(head==NULL)
	{
		head=new_node;
	}
	else
	{
		temp=head;
		while(temp->next!=NULL)
		temp=temp->next;
		temp->next=new_node;
		new_node->prev=temp;
	}
}

void del()
{
	struct node *temp;
	int ele;
    if(head==NULL)
    {
        printf("Empty List \n");
        return;
    }
	printf("Enter the element to be deleted: ");
	scanf("%d",&ele);
	temp=head;
	while(temp->data!=ele)
	{
		temp=temp->next;
		if(temp==NULL)
		{
		 printf("Element is not in the list\n");
		 return;
		}
	}
	if(temp==head)
	{
	    head=head->next;
	}
    else if(temp->next==NULL)
	{
		temp=temp->prev;
		temp->next=NULL;
	}

	else
	{
	    temp->prev->next=temp->next;
		temp->next->prev=temp->prev;
	}
}

void display()
{
	struct node *temp;
	temp=head;
    if(head==NULL)
    {
        printf("Empty List\n");
        return;
    }
	while(temp!=NULL)
	{
		 printf("%d\t",temp->data);
		 temp=temp->next;
	}
	printf("\n");
}

int main()
{
	int ch;
	do
	{
		printf("\n1. Insert left\n2. Insert right\n3. Create\n4. Delete\n5. Display\n6. Exit\n");
		printf("Enter your choice: ");
		scanf("%d",&ch);
		switch(ch)
		{
			 case 1: insert_left(); break;
			 case 2: insert_right(); break;
			 case 3: insert_end(); break;
			 case 4: del(); break;
			 case 5: display(); break;
			 case 6: exit(0);
		}
	}while (ch!= 6);
}
